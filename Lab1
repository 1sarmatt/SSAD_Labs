Task 1

#include <iostream>
#include <iomanip>

using namespace std;

void task1(int seconds) {
    int hours = seconds / 3600;
    int minutes = (seconds % 3600) / 60;
    seconds = seconds % 60;

    cout << setfill('0') << setw(2) << hours << ":"
         << setfill('0') << setw(2) << minutes << ":"
         << setfill('0') << setw(2) << seconds << endl;
}

int main() {
    int seconds_input;
    cin >> seconds_input;

    task1(seconds_input);

    return 0;
}


Task 2

#include <iostream>

using namespace std;

// a) Swap using pointers
void swap_by_pointer(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// b) Swap using references
void swap_by_reference(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

int main() {
    int x = 5, y = 10;

    swap_by_pointer(&x, &y);  // Pass addresses of x and y
    cout << "After swap (pointers): x = " << x << ", y = " << y << endl;

    x = 5; // Reset values
    y = 10;

    swap_by_reference(x, y); // Pass x and y directly as references
    cout << "After swap (references): x = " << x << ", y = " << y << endl;

    return 0;
}

Task 3

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// a) Remove duplicates using arrays
void remove_duplicates_array(int arr[], int &n) {
    int unique_index = 0;
    for (int i = 0; i < n; i++) {
        bool is_duplicate = false;
        for (int j = 0; j < unique_index; j++) {
            if (arr[i] == arr[j]) {
                is_duplicate = true;
                break;
            }
        }

        if (!is_duplicate) {
            arr[unique_index++] = arr[i];
        }
    }

    n = unique_index; // Update the size of the array
}

// b) Remove duplicates using vectors
void remove_duplicates_vector(vector<int> &vec) {
    sort(vec.begin(), vec.end());
    vec.erase(unique(vec.begin(), vec.end()), vec.end());
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    // a) Using arrays
    int arr[n];
   
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    remove_duplicates_array(arr, n);
    
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // b) Using vectors
    vector<int> vec(n);
    for (int i = 0; i < n; i++) {
        cin >> vec[i];
    }
    remove_duplicates_vector(vec);
    
    for (int i = 0; i < vec.size(); i++) {
        cout << vec[i] << " ";
    }
    cout << endl;

    return 0;
}

