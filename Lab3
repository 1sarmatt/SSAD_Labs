Task 1

#include <iostream>
#include <vector>
using namespace std;


class Animal
{
protected:
    string name;
    int age;

public:
    Animal(string n, int a) : name(n), age(a) {}

    virtual ~Animal()
    {
        cout << "Animal " << name << "has been destroyed" << endl;
    }

    virtual void makeSound() const = 0;
};


class LandAnimal : virtual public Animal
{
public:
    LandAnimal(string n, int a) : Animal(n, a) {}

    virtual void walk() const = 0;
};


class WaterAnimal : virtual public Animal
{
public:
    WaterAnimal(string n, int a) : Animal(n, a) {}

    virtual void swim() const = 0;
};


class Lion : public LandAnimal
{
public:
    Lion(string n, int a) : LandAnimal(n, a), Animal(n, a) {}

    void makeSound() const override
    {
        cout << name << " says: Roar!" << endl;
    }

    void walk() const override
    {
        cout << name << " is walking." << endl;
    }
};


class Dolphin : public WaterAnimal
{
public:
    Dolphin(string n, int a) : WaterAnimal(n, a), Animal(n, a) {}

    void makeSound() const override
    {
        cout << name << " says: Click!" << endl;
    }

    void swim() const override
    {
        cout << name << " is swimming." << endl;
    }
};


class Frog : public LandAnimal, public WaterAnimal
{
public:
    Frog(string n, int a) : LandAnimal(n, a), WaterAnimal(n, a), Animal(n, a) {}

    void makeSound() const override
    {
        cout << name << " says: Ribbit!" << endl;
    }

    void walk() const override
    {
        cout << name << " is hopping." << endl;
    }

    void swim() const override
    {
        cout << name << " is swimming." << endl;
    }
};

int main()
{
    vector<Animal *> zoo;

    zoo.push_back(new Lion("Leo", 5));
    zoo.push_back(new Dolphin("Dolly", 8));
    zoo.push_back(new Frog("Freddy", 2));

    for (Animal *animal : zoo)
    {
        animal->makeSound();
    }

    for (Animal *animal : zoo)
    {
        delete animal;
    }

    return 0;
}

Task 2

#include <iostream>
#include <vector>
using namespace std;

vector<int> customMap(const vector<int> &vec, int (*func)(int))
{
    vector<int> result;
    result.reserve(vec.size());
    for (const int &element : vec)
    {
        result.push_back(func(element));
    }
    return result;
}

vector<int> customFilter(const vector<int> &vec, bool (*predicate)(int))
{
    vector<int> result;
    for (const int &element : vec)
    {
        if (predicate(element))
        {
            result.push_back(element);
        }
    }
    return result;
}

int main()
{
    vector<int> nums = {1, 2, 3, 4, 5};


    vector<int> squared = customMap(nums, [](int x)
                                    { return x * x; });
    vector<int> odds = customFilter(nums, [](int x)
                                    { return x % 2 != 0; });

    cout << "Squared Numbers: ";
    for (int num : squared)
    {
        cout << num << " ";
    }
    cout << endl;

    cout << "Odd Numbers: ";
    for (int num : odds)
    {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
