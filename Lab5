Task 1

#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>

using namespace std;

template <typename T>
class GenericStack
{
protected:
    vector<T> stack;

public:
    explicit GenericStack(size_t initialCapacity)
    {
        stack.reserve(initialCapacity);
    }

    GenericStack() = default;

    void push(const T &element)
    {
        stack.push_back(element);
    }

    T pop()
    {
        if (stack.empty())
        {
            throw out_of_range("Stack is empty");
        }
        T topElement = stack.back();
        stack.pop_back();
        return topElement;
    }

    T peek() const
    {
        if (stack.empty())
        {
            throw out_of_range("Stack is empty");
        }
        return stack.back();
    }

    bool isEmpty() const
    {
        return stack.empty();
    }
};

class StringStack : public GenericStack<string>
{
public:
    void push(const string &element)
    {
        if (element.empty())
        {
            cout << "Cannot push an empty string onto the stack." << endl;
            return;
        }
        GenericStack::push(element);
    }

    void concatTopTwo()
    {
        if (stack.size() < 2)
        {
            throw out_of_range("Not enough elements to concatenate");
        }
        string top = pop();
        string secondTop = pop();
        push(secondTop + top);
    }
};

int main()
{
    GenericStack<int> intStack;
    intStack.push(1);
    intStack.push(2);
    cout << "Top of intStack: " << intStack.peek() << endl;
    cout << "Popped from intStack: " << intStack.pop() << endl;

    StringStack stringStack;
    stringStack.push("");
    stringStack.push("world!");
    stringStack.push("Hello, ");
    stringStack.concatTopTwo();
    cout << "After concatenation, top of stringStack: " << stringStack.peek() << endl;

    return 0;
}

Task 2

#include <iostream>
#include <memory>

using namespace std;

class Box
{
public:
    int value;
    explicit Box(int v) : value(v)
    {
        cout << "Box created with value: " << value << endl;
    }
    ~Box()
    {
        cout << "Box destroyed with value: " << value << endl;
    }
};

int create_unique(Box &value)
{
    unique_ptr<Box> u1 = make_unique<Box>(value);
    unique_ptr<Box> u2 = move(u1);

    if (!u1)
    {
        cout << "u1 is now null\n";
    }

    return u2.get()->value;
}

void create_shared_boxes()
{
    auto box1 = make_shared<Box>(10);
    {
        auto box2 = make_shared<Box>(20);
        shared_ptr<Box> box3 = box2;
        // At this point, the reference count for box2's object is 2.
        cout << "Inside the block, after creating box3, box2's ref count: " << box2.use_count() << endl;
    }
   
    cout << "Outside the block, box1's ref count: " << box1.use_count() << endl;
}

void demonstrate_weak_ptr()
{
    shared_ptr<Box> sharedBox = make_shared<Box>(30);
    weak_ptr<Box> weakBox = sharedBox;
    
    if (!weakBox.expired())
    {
       
        shared_ptr<Box> tempBox = weakBox.lock();
        cout << "Accessing Box value through weak_ptr: " << tempBox->value << endl;
        
    }
   
    sharedBox.reset();
    if (weakBox.expired())
    {
        cout << "The weak pointer is expired, pointing to no object." << endl;
    }
}

int main()
{
    Box b1(5);
    auto ivalue = create_unique(b1);
    cout << "integer value: " << ivalue << endl;

    create_shared_boxes();

    demonstrate_weak_ptr();

    return 0;
}
